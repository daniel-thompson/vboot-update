#!/bin/bash

## Copyright (C) 2006-2012 Daniel Baumann <daniel.baumann@progress-technologies.net>
## Copyright (C) 2016-2017 Riku Voipio    <riku.voipio@linaro.org>
## Copyright (C) 2021 Daniel Thompson <daniel.thompson@linaro.org>
##
## This program comes with ABSOLUTELY NO WARRANTY; for details see COPYING.
## This is free software, and you are welcome to redistribute it
## under certain conditions; see COPYING for details.

set -e

# User is unprivileged
if [ "$(id -u)" -ne 0 ]
then
	echo "E: need root privileges"
	exit 1
fi

# Redirect stdout to stderr due Debconf usage
exec 1>&2

# Reading the default file
if [ -e /etc/default/vboot ]
then
	. /etc/default/vboot
fi

# Reading the os-release file
if [ -e /etc/os-release ]
then
	. /etc/os-release
elif [ -e /usr/lib/os-release ]
then
	. /usr/lib/os-release
fi

VBOOT_UPDATE="${VBOOT_UPDATE:-true}"

if [ "${VBOOT_UPDATE}" != "true" ]
then
	echo "P: vboot-update is disabled in /etc/default/vboot."
	exit 0
fi

# Setting defaults if /etc/default/u-boot is missing

VBOOT_DEFAULT="${VBOOT_DEFAULT:-l0}"
VBOOT_PARAMETERS="${VBOOT_PARAMETERS:-ro quiet}"
VBOOT_FDT_DIR="${VBOOT_FDT_DIR:-/usr/lib/linux-image-}"

# Find parameter for root from fstab
if [ -z "${VBOOT_ROOT}" ]
then
	# Find root partition
	while read _LINE
	do

read _FS_SPEC _FS_FILE _FS_VFSTYPE _FS_MNTOPS _FS_FREQ _FS_PASSNO << EOF
${_LINE}
EOF

		if [ "${_FS_FILE}" = "/" ]
		then
			case "${_FS_SPEC}" in
				"#"*) ;;
				*) VBOOT_ROOT="root=${_FS_SPEC}"
				   break ;;
			esac
		fi
	done < /etc/fstab
fi

# if not in fstab, try from current kernel arguments
if [ -z "${VBOOT_ROOT}" ]
then
	for param in `cat /proc/cmdline`
	do
		if [[ $param == root=* ]]
		then
			VBOOT_ROOT="$param"
			break
		fi
	done
fi

# TODO: Identify the correct partition to write the kernel


# Find all linux versions
_KERNELS=$(linux-version list --paths | linux-version sort --reverse | sed -e 's,.*/boot/,,g')

# Select the most recent one using bourne-shell IFS
for _KERNEL in ${_KERNELS}
do
	break
done
_VERSION=${_KERNEL#*-}

if [ -e ${VBOOT_FDT_DIR}${_VERSION}/${VBOOT_FDT} ] && [ -n "${VBOOT_FDT}" ]
then
	_FDT="${VBOOT_FDT_DIR}${_VERSION}/${VBOOT_FDT}"
elif [ -f "${VBOOT_FDT:-dtb-${_VERSION}}" ] && [ /usr/lib/linux-image- = "${VBOOT_FDT_DIR}" ]
then
	_FDT="/${VBOOT_FDT:-dtb-${_VERSION}}"
else
	echo "E: cannot find any FDT"
	exit 2
fi

if [ -e /boot/initrd.img-${_VERSION} ]
then
	_INITRD="${_BOOT_DIRECTORY}/initrd.img-${_VERSION}"
else
	_INITRD=""
fi

echo "P: Generating boot partition for ${_KERNEL}..."

_TMPDIR=`mktemp -d -p /var/tmp vboot-update.XXXXXXX`

# Recompress kernel  with lz4
gunzip -t /boot/${_KERNEL} 2> /dev/null
if [ $? -eq 0 ]
then
	gunzip -c /boot/${_KERNEL} | lz4 -zqf - ${_TMPDIR}/${_KERNEL}.lz4
else
	cat /boot/${_KERNEL}       | lz4 -zqf - ${_TMPDIR}/${_KERNEL}.lz4
fi

cat > ${_TMPDIR}/${_KERNEL}.its <<EOF
/dts-v1/;

/ {
	images {
		kernel@1{
			description = "kernel";
			data = /incbin/("${_TMPDIR}/${_KERNEL}.lz4");
			type = "kernel_noload";
			arch = "arm64";
			os = "linux";
			compression = "lz4";
			load = <0>;
			entry = <0>;
		};
		fdt@1{
			description = "$(basename ${_FDT})";
			data = /incbin/("${_FDT}");
			type = "flat_dt";
			arch = "arm64";
			compression = "none";
			hash@1{
				algo = "sha1";
			};
		};
	};
	configurations {
		conf@1{
			kernel = "kernel@1";
			fdt = "fdt@1";
		};
	};
};
EOF

# Generate u-boot image (and ignore verify_image failure)
mkimage -D "-I dts -O dtb -p 2048" \
	-f ${_TMPDIR}/${_KERNEL}.its \
	${_TMPDIR}/${_KERNEL}.uimg \
	2> /dev/null \
|| true

# Store the kernel command line
echo "${VBOOT_ROOT} ${VBOOT_PARAMETERS}" > ${_TMPDIR}/cmdline

# Generate a dummy bootloader
dd if=/dev/zero of=${_TMPDIR}/bootloader.bin bs=512 count=1 2> /dev/null

# Generate the full image
vbutil_kernel --pack ${_TMPDIR}/${_KERNEL}.img \
        --version 1 \
        --vmlinuz ${_TMPDIR}/${_KERNEL}.uimg \
        --arch arm \
        --keyblock /usr/share/vboot/devkeys/kernel.keyblock \
        --signprivate /usr/share/vboot/devkeys/kernel_data_key.vbprivk \
        --config ${_TMPDIR}/cmdline \
        --bootloader ${_TMPDIR}/bootloader.bin

# Write out the image
dd if=${_TMPDIR}/${_KERNEL}.img of=${VBOOT_PARTITION} bs=4096 2> /dev/null
